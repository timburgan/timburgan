name: "Chess"

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode: yes or no'
        required: true
      game_branch:
        description: 'Game branch: master or PR branch'
        required: true
      issue_number:
        description: 'Triggering issue number'
        required: true

env:
  GH_REPO: ${{ github.repository }}

jobs:
  play:
    runs-on: ubuntu-latest
    steps:
    - name: Find and ACK the issue
      run: |
        set -xe
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        ISSUE="$(gh issue view ${{ github.event.inputs.issue_number }} --json 'author,title,number,state,labels' | jq -c '. | select(.state == "OPEN")')"
        echo "ISSUE=$ISSUE" >> $GITHUB_ENV
        
        if [[ -z ${ISSUE+x} ]]; then
          echo "FAILURE Open issue #${{ github.event.inputs.issue_number }} not found."
          exit 1
        fi
    - name: Not chess?
      run: |
        set -xe
        if [[ "$(echo "$ISSUE" | jq .title)" =~ ^chess* ]]; then
          echo "FAILURE Not chess."
          exit 1
        fi
        
    - name: React
      run: |
        set -xe
        gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='rocket' | jq .

    - uses: actions/checkout@v2
      with:
        ref: '${{ github.event.inputs.game_branch }}'

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.1
        # bundler-cache: true

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3

    - name: Parse the issue title
      run: |
        set -xe
        
        CHESS_GAME_NUM=`  echo "$ISSUE" | jq -r .title | awk -F'|' '{print $4}'`
        CHESS_GAME_CMD=`  echo "$ISSUE" | jq -r .title | awk -F'|' '{print $2}'`
        CHESS_USER_MOVE=` echo "$ISSUE" | jq -r .title | awk -F'|' '{print $3}'`

        CHESS_GAME_CMD_ALLOWED_LIST=('new' 'move')
        CHESS_GAME_CMD_ALLOWED_USED=`echo ${CHESS_GAME_CMD_ALLOWED_LIST[*]} | grep "$CHESS_GAME_CMD"`

        # if the title, move, or command is bad, exit

        if [[ (-z $CHESS_USER_MOVE && $CHESS_GAME_CMD == "move") || -z $CHESS_GAME_CMD_ALLOWED_USED ]]; then
          # react to issue
          PAGER= gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='confused' | jq .
          # add comment
          gh issue comment ${{ github.event.inputs.issue_number }} --body "@$(echo "$ISSUE" | jq -r .author.login) The game title or move was unable to be parsed."
          # close issue
          gh issue close ${{ github.event.inputs.issue_number }}
          echo "INVALID The game title or move was unable to be parsed."
          exit 1
        fi

        echo "CHESS_GAME_NUM=$CHESS_GAME_NUM" >> $GITHUB_ENV
        echo "CHESS_USER_MOVE=$CHESS_USER_MOVE" >> $GITHUB_ENV
        echo "CHESS_GAME_CMD=$CHESS_GAME_CMD" >> $GITHUB_ENV

        echo "GAME_DATA_PATH=./chess_games/chess.pgn" >> $GITHUB_ENV
        echo "GAME_STAT_PATH=./chess_games/stats.txt" >> $GITHUB_ENV
        echo "GAME_LEADERBOARD_PATH=./chess_games/leaderboard.txt" >> $GITHUB_ENV

    - name: Prevent user taking consecutive moves
      if: ${{ env.CHESS_GAME_CMD == 'move' }}
      run: |
        set -xe
        LAST_MOVER=$(cat $GAME_STAT_PATH | tail -n +2 | tail -n 1 | tac | awk -F '|' '{print $2}' | cut -c 2-)
        if [[ $LAST_MOVER == "$(echo "$ISSUE" | jq -r .author.login)" ]]; then
          # react
          PAGER= gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='confused' | jq .
          # comment
          gh issue comment ${{ github.event.inputs.issue_number }} --body "@$(echo "$ISSUE" | jq -r .author.login) Slow down! You _just_ moved, so can't immediately take the next turn. Invite a friend to take the next turn! [Share on Twitter...](https://twitter.com/share?text=I'm+playing+chess+on+a+GitHub+Profile+Readme!+I+just+moved.+You+have+the+next+move+at+https://github.com/${{ github.repository }})"
          # close issue
          gh issue close ${{ github.event.inputs.issue_number }}
          echo "INVALID Same player making consecutive moves."
          exit 1
        fi

    - name: Check if saved game PGN error
      run: |
        set -xe

        # load game file. Throws an exception otherwise, which is caught and sets 
        # environment variable CHESS_CANT_LOAD=true
        ruby <<- EORUBY
          require 'chess'
          game = begin
                   Chess::Game.load_pgn ENV.fetch('GAME_DATA_PATH')
                 rescue StandardError => e
                   # Either, file doesn't exist, invalid PGN format, illegal move saved, or bad notation error
                   File.write(ENV.fetch('GITHUB_ENV'), "CHESS_CANT_LOAD=true\n", mode: 'a')
                 end
          if game&.over?
            File.write(ENV.fetch('GITHUB_ENV'), "CHESS_GAME_OVER=true\n", mode: 'a')
          end
        EORUBY
        
        # by default assume we're going to load an existing game
        if [[ 
            # if saved_data file doesn't exist
            ! -f $GAME_DATA_PATH || 
            # if file was corrupt or invalid game
            CHESS_CANT_LOAD == 'true'
        ]]; then
          # react
          PAGER= gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='confused' | jq .
          # comment
          gh issue comment ${{ github.event.inputs.issue_number }} --body "@$(echo "$ISSUE" | jq -r .author.login) The game data is corrupt. A new game will be booted in a moment."
          # close issue
          gh issue close ${{ github.event.inputs.issue_number }}

          # create new issue as timburgan PAT with `chess|new`
          gh auth logout --hostname github.com && echo "${{ secrets.TIMBURGAN_PAT_NEW_ISSUE }}" | gh auth login --with-token
          if [[ "${{ env.TEST_MODE }}" == "yes" ]]; then
            gh issue create --label "test" --title "chess|new" --body "${{ env.GAME_BRANCH }}" --repo ${{ github.repository }}
          else
            gh issue create --title "chess|new" --body "See #${{ github.event.inputs.issue_number }}" --repo ${{ github.repository }}
          fi

          echo "FAILURE The game data is corrupt. A new game will be booted in a moment."
          exit 1
        fi

    - name: Check if new game requested
      run: |
        set -xe

        # by default assume we're going to load an existing game
        CHESS_NEW_GAME=false
        if [[ 
            # if new_game_request => new game
            ( $CHESS_GAME_CMD == 'new' && '$(echo "$ISSUE" | jq -r .author.login)' == 'timburgan' ) ||

            ( $CHESS_GAME_CMD == 'new' && $CHESS_GAME_OVER == 'true' )
        ]]; then
          # flag that a new game is needed
          CHESS_NEW_GAME=true
        fi
        echo "CHESS_NEW_GAME=$CHESS_NEW_GAME" >> $GITHUB_ENV

    - name: Trap invalid new game request
      if: ${{ env.CHESS_NEW_GAME == 'false' && env.CHESS_GAME_CMD == 'new' }}
      run: |
        set -xe
        PAGER= gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='confused' | jq .
        gh issue comment ${{ github.event.inputs.issue_number }} --body "@$(echo "$ISSUE" | jq -r .author.login) This is an invalid new game request. If a new game is genuinely needed, create a new issue and ping @timburgan."
        gh issue close ${{ github.event.inputs.issue_number }}
        exit 1

    - name: Create new game
      if: ${{ env.CHESS_NEW_GAME == 'true' }}
      run: |
        set -xe
        
        # delete existing game data to allow saving new game
        rm -f $GAME_DATA_PATH
        rm -f $GAME_STAT_PATH

        ruby <<- EORUBY
          require 'chess'
          game = Chess::Game.new
          File.write(ENV.fetch('GAME_DATA_PATH'), "#{game.pgn.to_s}")
        EORUBY

        # ack the issue
        PAGER= gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='rocket' | jq .

        # write stats
        echo "new|@$(echo "$ISSUE" | jq -r .author.login)||${{ github.event.inputs.issue_number }}|$(date -Iseconds)" > $GAME_STAT_PATH

    - name: Load existing game and perform move
      if: ${{ env.CHESS_GAME_CMD == 'move' }}
      run: |
        set -x
        ruby <<- EORUBY
          require 'chess'
          begin
            game = Chess::Game.load_pgn ENV.fetch('GAME_DATA_PATH')
            game.move(ENV.fetch('CHESS_USER_MOVE')) # ie move('e2e4', â€¦, 'b1c3')
            File.write(ENV.fetch('GAME_DATA_PATH'), "#{game.pgn.to_s}")
          rescue StandardError => e
            File.write('move_error', '')
          end
          if game&.over?
            File.write(ENV.fetch('GITHUB_ENV'), "CHESS_GAME_OVER=true\n", mode: 'a')
          else
            File.write(ENV.fetch('GITHUB_ENV'), "CHESS_GAME_OVER=false\n", mode: 'a')
          end
        EORUBY
        
        if [ -f move_error ]; then
          # react to issue
          PAGER= gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}/reactions -f content='confused' | jq .
          # add comment
          gh issue comment ${{ github.event.inputs.issue_number }} --body "@$(echo "$ISSUE" | jq -r .author.login) Whaaa.. '${CHESS_USER_MOVE}' is an invalid move! Usually this is because someone squeezed a move in just before you."
          # close issue
          gh issue close ${{ github.event.inputs.issue_number }}
          exit 1
        fi
        EORUBY

        # write stats
        echo "move|@$(echo "$ISSUE" | jq -r .author.login)|${CHESS_USER_MOVE}|${{ github.event.inputs.issue_number }}|$(date -Iseconds)" > $GAME_STAT_PATH

        # write leaderboard
        EXISTING_LINE=$(grep @$(echo "$ISSUE" | jq -r .author.login)$ $GAME_LEADERBOARD_PATH)
        if [[ -n "$EXISTING_LINE" ]]; then
          COUNT_OLD=$(echo $EXISTING_LINE | cut -d'|' -f1)
          COUNT_NEW=$(expr $COUNT_OLD + 1)
          WHO=$(echo $$EXISTING_LINE | cut -d'|' -f2)
          sed -n '/@$(echo "$ISSUE" | jq -r .author.login)$/p' -i -- "s/$COUNT_OLD|$WHO/$COUNT_NEW|$WHO/g" $GAME_LEADERBOARD_PATH
          sort -t'|' -k1 -r $GAME_LEADERBOARD_PATH
        else
          echo "1|@$(echo "$ISSUE" | jq -r .author.login)" >> $GAME_LEADERBOARD_PATH
        fi

    - name: Update README
      run: |
        set -x

        ruby <<- EORUBY
          require 'chess'


          # FIND VALID NEXT MOVES
          # ----------------------

          # list squares on the board - format a1, a2, a3, b1, b2, b3 etc
          # combine squares with where they  can MOVE to
          cols = ('a'..'h').to_a
          rows = (1..8).to_a
          squares = []
          cols.each do |col|
            rows.each do |row|
              squares.push "#{col}#{row}"
            end
          end
          next_move_combos = squares.map { |from| {from: from, to: squares} }

          fake_game = if ENV.fetch('CHESS_GAME_CMD') == 'move'
                        Chess::Game.load_pgn ENV.fetch('GAME_DATA_PATH')
                      else
                        Chess::Game.new
                      end

          # delete squares not valid for next move
          good_moves = []
          next_move_combos.each do |square|
            square[:to].each do |to|
              move_command = "#{square[:from]}#{to}"
              fake_game_tmp = if ENV.fetch('CHESS_GAME_CMD') == 'move'
                                File.write "#{ENV.fetch('GAME_DATA_PATH')}.fake", fake_game.pgn.to_s
                                Chess::Game.load_pgn "#{ENV.fetch('GAME_DATA_PATH')}.fake"
                              else
                                Chess::Game.new
                              end
              begin
                fake_game_tmp.move move_command
              rescue Chess::IllegalMoveError => e
                # puts "move: #{move_command} (bad)"
              else
                # puts "move: #{move_command} (ok)"
                if good_moves.select{ |move| move[:from] == square[:from] }.empty?
                  good_moves.push({ from: square[:from], to: [to] })
                else
                  good_moves.map do |move|
                    if move[:from] == square[:from]
                      {
                        from: move[:from],
                        to:   move[:to].push(to)
                      }
                    else
                      move
                    end
                  end
                end
              end
            end
          end

          
          game = Chess::Game.load_pgn ENV.fetch('GAME_DATA_PATH')
          game_state =  case game.status.to_s
                        when 'in_progress'
                          'Game is in progress.'
                        when 'white_won'
                          'Game won by white (hollow) with a checkmate.'
                        when 'black_won'
                          'Game won by black (solid) with a checkmate.'
                        when 'white_won_resign'
                          'Game won by white (hollow) by resign.'
                        when 'black_won_resign'
                          'Game won by black (solid) by resign.'
                        when 'stalemate'
                          'Game was a draw due to stalemate.'
                        when 'insufficient_material'
                          'Game was a draw due to insufficient material to checkmate.'
                        when 'fifty_rule_move'
                          'Game was a draw due to fifty rule move.'
                        when 'threefold_repetition'
                          'Game was a draw due to threshold repetition.'
                        else
                          'Game terminated. Something went wrong.'
                        end

          new_readme = <<~HTML

            ## Tim's Community Chess Game

            **#{game_state}** This is open to ANYONE to play the next move. That's the point. :wave:  It's your turn! Move a #{(game.board.active_color) ? 'black (solid)' : 'white (hollow)'} piece.

          HTML

          board = {
            "8": { a: 56, b: 57, c: 58, d: 59, e: 60, f: 61, g: 62, h: 63 },
            "7": { a: 48, b: 49, c: 50, d: 51, e: 52, f: 53, g: 54, h: 55 },
            "6": { a: 40, b: 41, c: 42, d: 43, e: 44, f: 45, g: 46, h: 47 },
            "5": { a: 32, b: 33, c: 34, d: 35, e: 36, f: 37, g: 38, h: 39 },
            "4": { a: 24, b: 25, c: 26, d: 27, e: 28, f: 29, g: 30, h: 31 },
            "3": { a: 16, b: 17, c: 18, d: 19, e: 20, f: 21, g: 22, h: 23 },
            "2": { a:  8, b:  9, c: 10, d: 11, e: 12, f: 13, g: 14, h: 15 },
            "1": { a:  0, b:  1, c:  2, d:  3, e:  4, f:  5, g:  6, h:  7 },
          }

          new_readme.concat "|   | A | B | C | D | E | F | G | H |\n"
          new_readme.concat "| - | - | - | - | - | - | - | - | - |\n"
          (1..8).to_a.reverse.each_with_index do |row|
            a = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:a]] || 'blank').to_s}.png)"
            b = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:b]] || 'blank').to_s}.png)"
            c = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:c]] || 'blank').to_s}.png)"
            d = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:d]] || 'blank').to_s}.png)"
            e = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:e]] || 'blank').to_s}.png)"
            f = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:f]] || 'blank').to_s}.png)"
            g = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:g]] || 'blank').to_s}.png)"
            h = "![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/#{(game.board[board[:"#{row}"][:h]] || 'blank').to_s}.png)"

            # a = game.board[board[:"#{row}"][:a]]
            # b = game.board[board[:"#{row}"][:b]]
            # c = game.board[board[:"#{row}"][:c]]
            # d = game.board[board[:"#{row}"][:d]]
            # e = game.board[board[:"#{row}"][:e]]
            # f = game.board[board[:"#{row}"][:f]]
            # g = game.board[board[:"#{row}"][:g]]
            # h = game.board[board[:"#{row}"][:h]]

            new_readme.concat "| #{row} | #{a} | #{b} | #{c} | #{d} | #{e} | #{f} | #{g} | #{h} |\n"
          end


          if game.over?
            new_readme.concat <<~HTML

              ## Play again? [![](https://raw.githubusercontent.com/${{ github.repository }}/master/chess_images/new_game.png)](https://github.com/${{ github.repository }}/issues/new?title=chess%7Cnew&body=Just+push+%27Submit+new+issue%27.+You+don%27t+need+to+do+anything+else.)

            HTML
          else
            new_readme.concat <<~HTML

              #### **#{(game.board.active_color) ? 'BLACK (solid)' : 'WHITE (hollow)'}:** It's your move... to choose _where_ to move..

              | FROM | TO - _just click one of the links_ :) |
              | ---- | -- |
            HTML

            good_moves.each do |move|
              new_readme.concat "| **#{move[:from].upcase}** | #{move[:to].map{|a| "[#{a.upcase}](https://github.com/${{ github.repository }}/issues/new?title=chess%7Cmove%7C#{move[:from]}#{a}%7C#{ENV.fetch('CHESS_GAME_NUM')}&body=Just+push+%27Submit+new+issue%27.+You+don%27t+need+to+do+anything+else.)"}.join(' , ')} |\n"
            end
          end


          new_readme.concat <<~HTML

            Ask a friend to take the next move: [Share on Twitter...](https://twitter.com/share?text=I'm+playing+chess+on+a+GitHub+Profile+Readme!+Can+you+please+take+the+next+move+at+https://github.com/timburgan)

            **How this works**

            When you click a link, it opens a GitHub Issue with the required pre-populated text, then just push "Create New Issue" to save it. That will trigger a [GitHub Actions](https://github.blog/2020-07-03-github-action-hero-casey-lee/#getting-started-with-github-actions) workflow that'll update my GitHub Profile _README.md_ with the new state of the board.

            **Notice a problem?**

            Raise an [issue](https://github.com/${{ github.repository }}/issues), and include the text _cc @timburgan_.

            **Last few moves, this game**

            | Move  | Who |
            | ----- | --- |
          HTML

          last_5_moves = %x[cat $GAME_STAT_PATH | tail -n +2 | tail -n 5 | tac]
          last_5_moves.each do |move|
            from = move.split('|').third.to_s[0..1].to_s.upcase
            to = move.split('|').third.to_s[2..3].to_s.upcase
            who = move.split('|').second.to_s[1..-1]
            new_readme.concat "| #{from} to #{to} | [@#{who}](https://github.com/#{who}) |\n"
          end



          ## <GET THE TOP USERS LEGACY METHOD>
              %x[rm -f leaderboard.legacy.txt || true]
              begin
                @octokit = Octokit::Client.new(access_token: "${{ secrets.GITHUB_TOKEN }}")
                @octokit.auto_paginate = true
                @octokit.default_media_type = ::Octokit::Preview::PREVIEW_TYPES[:integrations]
                issues = @octokit.list_issues(
                  'timburgan/timburgan',
                  state: 'closed',
                  accept: @preview_headers
                )&.select{ |issue| issue&.reactions.confused == 0 }
                if issues.present?
                    moves = issues.select{|issue| issue.title.start_with? 'chess|move|'}.map{ |issue| issue.user.login }&.group_by(&:itself)&.except("timburgan")&.transform_values(&:size).sort_by{|name,moves| moves }.reverse[0..19]
                    moves.each do |move|
                      File.write('leaderboard.legacy.txt', "| #{move[1]} | [@#{move[0]}](https://github.com/#{move[0]}) |\n", mode: 'a')
                    end
                end
              rescue StandardError => e
                # don't exit, if these can't be retrieved. Allow play to continue.
              end

              puts '--- legacy leaderboard ---'
              puts File.read('leaderboard.legacy.txt')
              puts '--- /legacy leaderboard ---'
          ## </GET THE TOP USERS LEGACY METHOD>


          new_readme.concat <<~HTML

            **Top 20 Leaderboard: Most moves across all games, except me.**

            | Moves | Who |
            | ----- | --- |
          HTML

          new_readme.concat "#{File.read(ENV.fetch('GAME_LEADERBOARD_PATH'))}\n"

          File.write('README.md', new_readme)
        EORUBY
        
    - name: Push PGN, README, stats, leaderboard changes
      run: |
        set -xe
        git commit -am "@@$(echo "$ISSUE" | jq -r .author.login) $(echo "$ISSUE" | jq -r .title) via #${{ github.event.inputs.issue_number }}"
        git push origin ${{ github.event.inputs.game_branch }}

    - name: Game over. Thank players
      if: ${{ env.CHESS_GAME_OVER == 'true' }}
      run: |
        set -xe
        
        STAT_MOVES=$(expr $(cat $GAME_STAT_PATH | wc -l) - 1)
        STAT_PLAYERS=$(cat $GAME_STAT_PATH | tail -n +2 | awk -F'|' '{print $2}' | sort --unique)
        STAT_START=$(head -n1 $GAME_STAT_PATH | awk -F'|' '{print $5}'
        STAT_END=$(tail -n1 $GAME_STAT_PATH | awk -F'|' '{print $5}'
        STAT_DURATION=$(date -u -d @$(($(date -d "$STAT_END" '+%s') - $(date -d "$STAT_START" '+%s'))) '+%H')

        # cat << EOF >> user_list
        # first-line
        # New |tim|    |issue|$(date -Iseconds)
        # move|tim|move|issue|date
        # move|dan|move|issue|date
        # move|joe|move|issue|date
        # move|dan|move|issue|date
        # Move|$(echo "$ISSUE" | jq -r .author.login)|${CHESS_USER_MOVE}|${{ github.event.inputs.issue_number }}|$(date -Iseconds)
        # EOF

        gh issue comment ${{ github.event.inputs.issue_number }} --body "That's game over! Thank you for playing that chess game. That game had ${STAT_MOVES} moves, $(echo "${STAT_PLAYERS}" | wc -l) players, and went for ${STAT_DURATION} hours. Let's play again at https://github.com/timburgan.\n\nPlayers that game: $(awk '{print;}' file.txt | paste -s -d', ')")

    - name: Move is complete
      if: ${{ env.CHESS_GAME_CMD == 'move' }}
      run: |
        set -xe
        gh issue comment ${{ github.event.inputs.issue_number }} --body "@$(echo "$ISSUE" | jq -r .author.login) Done. View back at https://github.com/${{ github.repository }}\n\nAsk a friend to take the next move: [Share on Twitter...](https://twitter.com/share?text=I'm+playing+chess+on+a+GitHub+Profile+Readme!+I+just+moved.+You+have+the+next+move+at+https://github.com/${{ github.repository }})")
        gh issue close ${{ github.event.inputs.issue_number }}

